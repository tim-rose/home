#!/bin/sh
# .FUNCRC() --Some useful shell functions.
#
# Contents:
# env()         --Alter for sorted output and de-fang escape/unprintable characters.
# path()        --Print the contents of PATH/$1 variable punctuated by newlines.
# find0()       --Find but print with NUL terminators (for filenames containing space).
# recursively() --Run a command on all files in this directory and subdirs.
# quietly()     --Run a command, discarding stdout+stderr.
# calc()        --Echo a calculation result.
# maxlen()      --Calculate the maximum line length of stdin.
# pdfman()      --Open a man page as a PDF file.
# tgrep()       --"table" grep; print the first (header) line, and matching others.
#
#
# env() --Alter for sorted output and de-fang escape/unprintable characters.
#
env()	{ command env | cat -v | sort; }

#
# path() --Print the contents of PATH/$1 variable punctuated by newlines.
#
path()  { eval "echo \${${1:-PATH}}" | tr ':' '\012';  }

#
# find0() --Find but print with NUL terminators (for filenames containing space).
#
find0() { find "$@" -print0; }

#
# recursively() --Run a command on all files in this directory and subdirs.
#
recursively() { find [^.]* -type f -print0 | xargs -0 "$@"; }

#
# quietly() --Run a command, discarding stdout+stderr.
#
quietly() { "$@"; } >/dev/null 2>&1

#
# calc() --Echo a calculation result.
#
calc() { echo "scale=2; $*" | bc; }
#
# maxlen() --Calculate the maximum line length of stdin.
#
maxlen() { sed -e 's/./+1/g' -e 's/^/0/'| bc | sort -rn | head -1; }

#
# pdfman() --Open a man page as a PDF file.
#
pdfman() {
    man -t "$@" | ps2pdf - - > /tmp/$1.pdf
    open /tmp/$1.pdf
    { sleep 2; rm /tmp/$1.pdf; } &
}

#
# tgrep() --"table" grep; print the first (header) line, and matching others.
#
# Remarks:
# Useful for files/commands like ps(1)
#
tgrep() { local tag=$1; shift; cat "$@" |sed -ne1p -e "/$tag/p"; }

#
# a2pdf() --Create a printable PDF file from a text file.
#
a2pdf()
{
    for file; do
        a2ps -o "$file.ps" $file && ps2pdf "$file.ps" && rm -f "$file.ps"
    done
}
