#!/bin/sh
# .BASHRC (->.KSHRC) --RC file for (interactive) Bourne-like shells.
#
# Contents:
# git_status() --Show the current git branch, if any.
# job_status() --Show the presence of background jobs.
# dir_status() --Show the number of items in the directory stack.
# cmd_status() --Print the status of the previous command, if it failed.
# set_prompt() -- Customise the user prompt.
#
# Remarks:
# This script sets up a fairly elaborate, colourful shell prompt that
# displays various status indications in the prompt itself, and in the
# terminal's window title.
#
#date "+.bashrc: %c"
umask 002               # permissions mask: rwxrwxr-x
set -o ignoreeof	# ignore <CTRL d>, use exit to terminate ksh
set -o emacs		# Set up in-line edit
HISTCONTROL=ignoreboth		# bash history control

#
# git_status() --Show the current git branch, if any.
#
git_status()
{
    git branch 2>/dev/null |
	sed -ne 's/ detached at /@/;/^[*]/s/^[*] */:/p'
}

#
# job_status() --Show the presence of background jobs.
#
# Output:
# The text indication (and count) of background jobs.
#
# Remarks:
# Some systems throw off a background task as part of shell setup (I'm
# looking at you, Darwin), that usually shows as a "done" job for
# the initial prompt.
#
job_status()
{
    local jobs=$(jobs | wc -l)

    if [ "$jobs" -ne 0 ]; then
        printf '+%d' "$jobs"
    fi
}

#
# dir_status() --Show the number of items in the directory stack.
#
# Output:
# The text indication (and count) of background jobs.
#
# Remarks:
# Not all shells implement a directory stack, so this creates
# a NOP fallback function in such cases.
#
dir_status() { :; }             # fallback
if type dirs >/dev/null 2>&1; then
    dir_status()
    {
        local dirs=$(dirs -p | wc -l)

        if [ "$dirs" -ne 1 ]; then
            printf '/%d' "$dirs"
        fi
    }
fi

#
# cmd_status() --Print the status of the previous command, if it failed.
#
# Remarks:
# Unix process exit status is a 16-bit word comprising two bytes:
# * the status value set by calling exit(3)
# * the signal sent to the process that caused its exit (if any)
#
cmd_status()
{
    local status=$? reason= signal= signal_name=

    if [ $status -eq 0 ]; then
	return			# command succeeded, do nothing
    fi
    if [ $status -lt 126 ]; then
	reason="exit status: $status"
    else
	case "$status" in
	126) reason='cannot execute';;
	127) reason='command not found';;
	128) reason='exit <invalid>';;
	255) reason='exit <out-of-range>';;
        *)
	    signal=$(($status-128))
	    if ! signal_name=$(kill -l $signal 2>/dev/null); then
		signal_name="unknown signal"
	    fi
	    reason="received signal: $signal ($signal_name)"
	    ;;
	esac
    fi
    printf "\033[2;3m# %s\033[m\n" "$reason"
}

#
# set_prompt() -- Customise the user prompt.
#
# Remarks:
# Set main prompt, to ": [<host>]; ". Note that this prompt is
# syntactally a shell NOP, so complete lines can be selected and
# pasted for re-execution.  The prompt colour indicates whether
# the session is local/remote, and "privileged" (i.e. root).
#
# Note: this function is removed after it is used.  The dynamic
# aspects of the prompt are delegated to various status functions.
#
# REVISIT: disable apple-term's "represented file" stuff?:
# \033]6;document-url\007
# \033]7;directory-url\007
#
# Also:
# \033]1;tab-title\007
# \033]2;window-title\007
#
set_prompt()
{
    local fg=32 		# default prompt colour: green
    local bg= window_title= mode= sh_level= prompt=

    # local/remote customisation: local=green, remote=cyan
    if [ "$SSH_CONNECTION" ]; then
	fg=36
    fi

    # privilege customisation: root=yellow/red
    if [ "$EUID" = "0" ]; then
	fg=33 bg=41
    fi

    # finalise prompt foreground, background colours
    mode="\e[${fg}${bg:+;$bg};1m"

    if [ "$SHLVL" != '1' ]; then
	sh_level=":$SHLVL"
    fi
    #
    # terminal-specific customisation: if supported:
    #  * show user, host, directory and project in title bar
    #  * show VCS status/info
    #  * show shell level
    #  * show presence of background jobs
    #  * adjust fg/bg as per above customisations
    #
    PROMPT_COMMAND="cmd_status${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
    prompt="\h\$(git_status)$sh_level\$(job_status)\$(dir_status)"
    case "$TERM" in
	xterm*|rxvt*|dtterm*|cygwin)
	    project_status="\${PROJECT:+ [\$PROJECT]}"
	    window_title="\[\e]1;\h\007\e]2;\u@\h \w$project_status\007\]"
            PS1="\[\e[m\]$window_title: [\[$mode\]$prompt\[\e[m\]]; "
            PS2="\[\e[;36m\]: > \[\e[m\]"
	    ;;
	ansi|linux|vt[0-9]*)	# colourful prompt only
            PS1="\[\e[m\]: [\[$mode\]$prompt\[\e[m\]]; "
            PS2="\[\e[;36m\]: > \[\e[m\]"
	    ;;
	*)				# display hostname in prompt
            PS1=': [$prompt]; '
	    PS2=': > '
	    ;;
    esac

    # Add Windows Terminal integration: special codes that mark the
    # start/end/status of commands and prompt.
    # This is a bit of a hack, because Terminal doesn't declare itself
    # in the TERM variable.
    if [ "$WSLENV" -o "$OS" = "ming64_nt" ]; then
        PS1="\[\e]133;\$?D;\a\]\[\e]133;A;\a\]$PS1\[\e]133;B;\a\]"
    fi
}

set_prompt			# use it
unset set_prompt		# ...and lose it.

#
# load any further customisations from the etc directory, and bashrc-<host>
#
for file in \
    $HOME/.envrc $HOME/.aliasrc $HOME/.funcrc $HOME/.ttyrc \
    $HOME/etc/sh/* $ENV-$HOSTNAME; do
    if [ -e "$file" ]; then
	. $file
    fi
done

#
# if compgen is supported load the completions.
#
if type compgen >/dev/null 2>&1; then
    if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
        . /etc/bash_completion
    fi
fi
