#!/bin/sh
# .BASHRC (->.KSHRC) --RC file for (interactive) Bourne-like shells.
#
# Contents:
# vcs_status() --Show the current git branch, if any.
# job_status() --Show the presence of background jobs.
# cmd_status() --Print the status of the previous command, if it failed.
# set_prompt() -- Customise the user prompt.
#
# Remarks:

# This script sets up a fairly elaborate, colourful shell prompt that
# displays various status indications in the prompt itself, and in the
# terminal's window title.
#
#date "+.bashrc: %c"
umask 002
set -o ignoreeof	# ignore <CTRL d>, use exit to terminate ksh
set -o emacs		# Set up in-line edit
HISTCONTROL=ignoreboth		# bash history control

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

#
# vcs_status() --Show the current git branch, if any.
#
vcs_status()
{
    git branch 2>/dev/null |
	sed -ne 's/ detached at /@/' -e '/^[*]/s/^[*] */:/p'
}

#
# job_status() --Show the presence of background jobs.
#
# Remarks:
# Some systems throw off a background task as part of shell setup (I'm
# looking at you, Darwin), that usually shows as a "done" job for
# the initial prompt.
#
job_status()
{
    local jobs=$(jobs)
    if [ "$jobs" ]; then
	# printf '\xe2\x97\x8f\n'	# black circle
	printf '+'
    fi
}

#
# cmd_status() --Print the status of the previous command, if it failed.
#
cmd_status()
{
    local status=$? reason= signal= signal_name=

    if [ $status -eq 0 ]; then
	return			# command succeeded, do nothing
    fi
    if [ $status -lt 126 ]; then
	reason="exit status: $status"
    else
	case "$status" in
	126) reason='cannot execute';;
	127) reason='command not found';;
	128) reason='exit <invalid>';;
	255) reason='exit <out-of-range>';;
        *)
	    signal=$(($status-128))
	    if ! signal_name=$(kill -l $signal 2>/dev/null); then
		signal_name="unknown signal"
	    fi
	    reason="caught signal: $signal ($signal_name)"
	    ;;
	esac
    fi
    printf "\033[2m#%s\033[m\n" "$reason"
}

#
# set_prompt() -- Customise the user prompt.
#
# Remarks:
# Set main prompt, to ": [<host>]; ". Note that this prompt is
# syntactally a shell NOP, so complete lines can be selected and
# pasted for re-execution.  The prompt colour indicates whether
# the session is local/remote, and "privileged" (i.e. root).
#
# Note: this function is removed after it is used.
#
# REVISIT: disable apple-term's "represented file" stuff?:
# \033]6;document-url\007
# \033]7;directory-url\007
#
# Also:
# \033]1;tab-title\007
# \033]2;window-title\007
#
set_prompt()
{
    local fg=32 		# default prompt colour: green
    local bg= window_title= mode= sh_level= prompt=
    # local unicode_star=$(printf '\xe2\x98\x85')

    if [ "$SSH_CONNECTION" ]; then
	fg=36	# local/remote customisation: local=green, remote=cyan
    fi

    # privilege customisation: root=yellow/red
    if [ "$EUID" = "0" ]; then
	fg=33; bg=41;
    fi

    # finalise fg, bg "colours"
    mode="\e[${fg}${bg:+;$bg};1m"

    if [ "$VCS" = "git" ]; then
	vcs_prompt="\$(vcs_status)"
    fi
    if [ "$SHLVL" != '1' ]; then
	sh_level=":$SHLVL"
    fi
    #
    # terminal customisation: if supported:
    #  * show user, host, directory and project in title bar
    #  * show VCS status/info
    #  * show shell level
    #  * show presence of background jobs
    #  * adjust fg/bg as per above customisations
    #
    PROMPT_COMMAND="cmd_status${PROMPT_COMMAND:+; $PROMPT_COMMAND}"
    prompt="\h$vcs_prompt$sh_level\$(job_status)"
    case "$TERM" in
	xterm*|rxvt*|dtterm*|cygwin)
	    project_status="\${PROJECT:+ [\$PROJECT]}"
	    #project_status="\${PROJECT:+ $unicode_star\$PROJECT}"
	    window_title="\[\e]1;\h\007\e]2;\u@\h \w$project_status\007\]"
            PS1="$window_title: [\[$mode\]$prompt\[\e[m\]]; "
            PS2="\[\e[36m\]: > \[\e[m\]"
	    ;;
	ansi|linux|vt[0-9]*)	# colourful prompt only
            PS1=": [\[$mode\]$prompt\[\e[m\]]; "
            PS2="\[\e[36m\]: > \[\e[m\]"
	    ;;
	*)				# display hostname in prompt
            PS1=': [$prompt]; '
	    PS2=': > '
	    ;;
    esac
    #
    # Gnome terminal seems a bit buggy wrt its cursor, which seems to
    # disappear(!) often.  The following command string sets its colour
    # (not possible any other way), which has the useful side-effect
    # of making it visible again.
    #
    if [ "$DESKTOP_SESSION" = "gnome-classic" -o \
         "$SESSIONTYPE" = "gnome-session" ]; then
	printf '\033]12;red\a'	# gnome: set red cursor (erk!)
    fi
    if [ $(uname -s) != 'Darwin' ]; then
	printf '\033]6;\007\033]7;\007' # disable apple-term's represented file stuff
    fi
}
set_prompt			# use it
unset set_prompt		# ...and lose it.

#
# load any further customisations from the etc directory, and bashrc-<host>
#
for file in $HOME/etc/sh/* $ENV-$HOSTNAME; do
    if [ -e "$file" ]; then
	. $file
    fi
done
